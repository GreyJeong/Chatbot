#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('Chatbot:server');
 var http = require('http');
 var htmlReader = require('fs');
 var httpServer = http.createServer(app);
 var chatSocket = require('socket.io').listen(httpServer);
//var jsdom = require('jsdom');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);


/**
 * Listen on provided port, on all network interfaces.
 */ 
 httpServer.listen(port);
 httpServer.on('error', onError);
 httpServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
 * TCP Socket Module for Chatbot Core : Chatscript local Server
 *
 */
 var net = require('net');

/*
 * iconv-lite module for avoiding corrupted Korean
 *
 */
 var iconv = require('iconv-lite');

/**
 * Socket.io for Chat
 */
 chatSocket.sockets.on('connection',function(socket){
  console.log("new User Connection");
 
  socket.on('from_client', function(msg){
    console.log("User : " + msg);

    var chatScript = new net.Socket();  //make a new socket to connect ChatScript Server
    var response;
    chatScript.connect(1024, 'localhost',function(){ //IP : localhost default Port : 1024 
      console.log("ChatScript server connected!");

      var user = "grey";
      var bot = "CAT";
    var sendMessage = user + '\0' + bot + '\0' + msg + '\0'; //put null character at the end of each string
      chatScript.write(iconv.encode(sendMessage,'euckr')); //Encoding message to EUC-KR for avoiding Korean message corrupted.
    });

    chatScript.on('data', function(data){
      response = iconv.decode(data,'euckr');
      socket.emit('to_client', response); //send ChatScript Server response to User
    });

    chatScript.on('close', function(){
      console.log("ChatScript Server disconnected!");
    });
  });
});



/**
 * jsdom test
 *
 */

/*jsdom.env({
  file : "./views/index.html",
  //scripts : ["http://code.jquery.com/jquery.js"],
  done : function (err, window) {
    console.log("contents of h1:", window.document.getElementsByTagName('h1')[0].textContent);
  }
});*/

/*var http = require('http'),
    io = require('socket.io'),
    express = require('express');

var port = 3000;
var server = http.createServer();
io = require('socket.io').listen(server);
//server.use(express.static(__dirname + '/public'));
server.listen(port);

io.sockets.on('connection', function(socket){
  socket.emit('toclient',{hello: 'foo'});
  socket.on('fromclient', function(data){
    console.log(data);
  });
});*/